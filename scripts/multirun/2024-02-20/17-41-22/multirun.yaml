hydra:
  run:
    dir: outputs/${now:%Y-%m-%d}/${now:%H-%M-%S}
  sweep:
    dir: multirun/${now:%Y-%m-%d}/${now:%H-%M-%S}
    subdir: ${hydra.job.num}
  launcher:
    _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
    n_jobs: -1
    backend: null
    prefer: processes
    require: null
    verbose: 0
    timeout: null
    pre_dispatch: 2*n_jobs
    batch_size: auto
    temp_folder: null
    max_nbytes: null
    mmap_mode: r
  sweeper:
    _target_: hydra._internal.core_plugins.basic_sweeper.BasicSweeper
    max_batch_size: null
    params:
      model: Lora_model
      task: RNAlocalization_Lora
      embedder: nucleotidetransformer
  help:
    app_name: ${hydra.job.name}
    header: '${hydra.help.app_name} is powered by Hydra.

      '
    footer: 'Powered by Hydra (https://hydra.cc)

      Use --hydra-help to view Hydra specific help

      '
    template: '${hydra.help.header}

      == Configuration groups ==

      Compose your configuration from those groups (group=option)


      $APP_CONFIG_GROUPS


      == Config ==

      Override anything in the config (foo.bar=value)


      $CONFIG


      ${hydra.help.footer}

      '
  hydra_help:
    template: 'Hydra (${hydra.runtime.version})

      See https://hydra.cc for more info.


      == Flags ==

      $FLAGS_HELP


      == Configuration groups ==

      Compose your configuration from those groups (For example, append hydra/job_logging=disabled
      to command line)


      $HYDRA_CONFIG_GROUPS


      Use ''--cfg hydra'' to Show the Hydra config.

      '
    hydra_help: ???
  hydra_logging:
    version: 1
    formatters:
      simple:
        format: '[%(asctime)s][HYDRA] %(message)s'
    handlers:
      console:
        class: logging.StreamHandler
        formatter: simple
        stream: ext://sys.stdout
    root:
      level: INFO
      handlers:
      - console
    loggers:
      logging_example:
        level: DEBUG
    disable_existing_loggers: false
  job_logging:
    version: 1
    formatters:
      simple:
        format: '[%(asctime)s][%(name)s][%(levelname)s] - %(message)s'
    handlers:
      console:
        class: logging.StreamHandler
        formatter: simple
        stream: ext://sys.stdout
      file:
        class: logging.FileHandler
        formatter: simple
        filename: ${hydra.runtime.output_dir}/${hydra.job.name}.log
    root:
      level: INFO
      handlers:
      - console
      - file
    disable_existing_loggers: false
  env: {}
  mode: MULTIRUN
  searchpath: []
  callbacks: {}
  output_subdir: .hydra
  overrides:
    hydra: []
    task: []
  job:
    name: train_PEFT
    chdir: null
    override_dirname: ''
    id: ???
    num: ???
    config_name: PEFT_config
    env_set: {}
    env_copy: []
    config:
      override_dirname:
        kv_sep: '='
        item_sep: ','
        exclude_keys: []
  runtime:
    version: 1.3.1
    version_base: '1.3'
    cwd: /home/sxr280/BERTLocRNA/scripts
    config_sources:
    - path: hydra.conf
      schema: pkg
      provider: hydra
    - path: /home/sxr280/BERTLocRNA/conf/train_conf
      schema: file
      provider: main
    - path: ''
      schema: structured
      provider: schema
    output_dir: ???
    choices:
      hydra/env: default
      hydra/callbacks: null
      hydra/job_logging: default
      hydra/hydra_logging: default
      hydra/hydra_help: default
      hydra/help: default
      hydra/sweeper: basic
      hydra/launcher: joblib
      hydra/output: default
  verbose: false
task: RNAlocalization_Lora
embedder: nucleotidetransformer
embedder_obj: None
model: Lora_model
output_dir: ${hydra:runtime.cwd}/../output/${task}/${embedder}
nb_classes: ${Lora_model.model_config.nb_classes}
compartments:
- Nucleus
- Exosome
- Cytosol
- Cytoplasm
- Ribosome
- Membrane
- Endoplasmic reticulum
- Microvesicle
- Mitochondrion
loss_weight: false
sample_t: 80
RNAlocalization_Lora:
  path: TerminatorJ/localization_multiRNA
wandb:
  project: BERTLocRNA
  name: ${model}
Lora_model:
  _target_: BERTLocRNA.models.Lora_model.PLMFactory
  PLM: ${embedder_obj}
  lora_config:
    r: 32
    lora_alpha: 64
    target_modules:
    - query
    - value
  model_config:
    nb_classes: 9
    drop_flat: 0.25
    normalizeatt: true
    activation: gelu
    RNA_dim: 4
    pooling_size: ${${embedder}.pool_size}
    hidden_dim: ${${embedder}.hidden_dim}
    RNA_order:
    - UNK
    - A
    - C
    - G
    - T
    - 'N'
    - Y RNA
    - lincRNA
    - lncRNA
    - mRNA
    - miRNA
    - ncRNA
    - pseudo
    - rRNA
    - scRNA
    - scaRNA
    - snRNA
    - snoRNA
    - vRNA
nucleotidetransformer:
  _target_: BERTLocRNA.utils.PEFT.NucleotideTransformerLora
  model_path: InstaDeepAI/nucleotide-transformer-2.5b-multi-species
  batch_size: 32
  dataloader: true
  hidden_dim: 2560
  collator: true
  pool_size: 8
  task: ${task}
Trainer:
  config:
    rna_ref:
    - lncRNA
    - mRNA
    - miRNA
    - snRNA
    - snoRNA
    accelerator: gpu
    strategy: ddp
    max_epochs: 200
    precison: 32
    num_nodes: 1
    log_every_n_steps: 1000
    patience: 10
    gradient_clip: true
    optimizer_cls: torch.optim.Adam
    lr: 0.001
    weight_decay: 1.0e-05
    nb_classes: ${nb_classes}
    output_dir: ${output_dir}
    RNA_order: ${${model}.model_config.RNA_order}
    compartments: ${compartments}
